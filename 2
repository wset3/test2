-- Global Toggles
getgenv().AutoMakeDungeon = true -- Enables/disables auto dungeon creation
getgenv().AutoMenu = true -- Enables/disables auto menu actions

-- Version for cache prevention
local version = os.time()

-- Always execute the loadstring script
local success, err = pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/wset3/test1/refs/heads/main/1" .. version))()
end)
if not success then
    print("Error loading script:", err)
else
    print("Script loaded successfully.")
end

-- Level-based dungeon configuration
local levelDungeons = {
    {name = "Desert Temple", levels = {1, 5, 15}, difficulties = {"Easy", "Medium", "Hard"}},
    {name = "Winter Outpost", levels = {30, 40, 50}, difficulties = {"Easy", "Medium", "Hard"}},
    {name = "Pirate Island", levels = {60, 65}, difficulties = {"Insane", "Nightmare"}},
    {name = "King's Castle", levels = {70, 75}, difficulties = {"Insane", "Nightmare"}},
    {name = "The Underworld", levels = {80, 85}, difficulties = {"Insane", "Nightmare"}},
    {name = "Samurai Palace", levels = {90, 95}, difficulties = {"Insane", "Nightmare"}},
    {name = "The Canals", levels = {100, 105}, difficulties = {"Insane", "Nightmare"}},
    {name = "Ghastly Harbor", levels = {110, 115}, difficulties = {"Insane", "Nightmare"}},
    {name = "Steampunk Sewers", levels = {120, 125}, difficulties = {"Insane", "Nightmare"}},
    {name = "Orbital Outpost", levels = {135, 140}, difficulties = {"Insane", "Nightmare"}},
    {name = "Volcanic Chamber", levels = {150, 155}, difficulties = {"Insane", "Nightmare"}},
    {name = "Aquatic Temple", levels = {160, 165}, difficulties = {"Insane", "Nightmare"}},
    {name = "Enchanted Forest", levels = {170, 175}, difficulties = {"Insane", "Nightmare"}},
    {name = "Northern Lands", levels = {180, 185}, difficulties = {"Insane", "Nightmare"}},
    {name = "Gilded Skies", levels = {190, 195}, difficulties = {"Insane", "Nightmare"}},
    {name = "Yokai Peak", levels = {200, 205}, difficulties = {"Insane", "Nightmare"}},
    {name = "Abyssal Void", levels = {210, 215}, difficulties = {"Insane", "Nightmare"}}
}

-- Determine dungeon and difficulty based on player level
local function determineDungeonAndDifficulty(level)
    for _, dungeon in ipairs(levelDungeons) do
        for i, reqLevel in ipairs(dungeon.levels) do
            if level >= reqLevel and (not dungeon.levels[i+1] or level < dungeon.levels[i+1]) then
                return dungeon.name, dungeon.difficulties[i]
            end
        end
    end
    return nil, nil -- No matching dungeon
end

-- AutoMenu sequence
if getgenv().AutoMenu then
    -- Step 1: Execute server calls
    local args1 = {
        [1] = {
            [1] = {
                [1] = "\1"
            },
            [2] = "2"
        }
    }
    game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args1))
    wait(1.5)

    local args2 = {
        [1] = {
            [1] = "ui",
            [2] = "LeaderboardGui"
        }
    }
    game:GetService("ReplicatedStorage").Utility.AssetRequester.Remote:InvokeServer(unpack(args2))

    local args3 = {
        [1] = "GetWeapons"
    }
    game:GetService("ReplicatedStorage").remotes.getData:InvokeServer(unpack(args3))
    game:GetService("ReplicatedStorage").remotes.reloadInvy:InvokeServer()

    -- Get Dungeon Stats for Desert Temple as an example
    local args4 = {
        [1] = "Desert Temple"
    }
    game:GetService("ReplicatedStorage").remotes.getDungeonStats:InvokeServer(unpack(args4))

    local args5 = {
        [1] = {
            [1] = {
                [1] = "\1",
                [2] = {
                    ["\3"] = "select",
                    ["characterIndex"] = 1
                }
            },
            [2] = "L"
        }
    }
    game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args5))   
    wait(0.9)
else
    print("AutoMenu is disabled.")
end

-- AutoMakeDungeon sequence
if getgenv().AutoMakeDungeon then
    local playerLevel = getgenv().PlayerLevel or 1 -- Substitute this with the actual level retrieval function
    local dungeonName, difficulty = determineDungeonAndDifficulty(playerLevel)

    if dungeonName and difficulty then
        print("Starting Dungeon:", dungeonName, "Difficulty:", difficulty)

        -- Dungeon creation settings
        local selectedValues = {
            dungeonName = dungeonName,
            mode = "Normal",
            difficulty = difficulty,
            minimumJoinLevel = 0,
            maxPlayers = 40,
            visibility = "Public",
            tier = 1,
            partyName = "123"
        }

        -- Function to create and start dungeon
        local function CreateParty()
            local args = {
                [1] = {
                    [1] = {
                        [1] = "\1",
                        [2] = {
                            ["\3"] = "CreateParty",
                            ["partyData"] = {
                                ["dungeonName"] = selectedValues.dungeonName,
                                ["mode"] = selectedValues.mode,
                                ["difficulty"] = selectedValues.difficulty,
                                ["minimumJoinLevel"] = selectedValues.minimumJoinLevel,
                                ["maxPlayers"] = selectedValues.maxPlayers,
                                ["visibility"] = selectedValues.visibility,
                                ["tier"] = selectedValues.tier,
                                ["partyName"] = selectedValues.partyName
                            }
                        }
                    },
                    [2] = "5"
                }
            }
            game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args))
        end

        local function StartParty()
            local args = {
                [1] = {
                    [1] = {
                        [1] = "\1",
                        [2] = {
                            ["\3"] = "StartParty"
                        }
                    },
                    [2] = "5"
                }
            }
            game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args))
        end

        -- Execute sequence
        CreateParty()
        wait(1)  -- Allow time for party creation
        StartParty()
        print("Dungeon Started:", dungeonName, "at Difficulty:", difficulty)
    else
        print("No available dungeon for current level:", playerLevel)
    end
else
    print("AutoMakeDungeon is disabled.")
end
